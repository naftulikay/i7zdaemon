#!/bin/bash
#
### BEGIN INIT INFO
# 
# Provides:             i7zdaemon
# Required-Start:       $remote_fs
# Required-Stop:        $remote_fs
# Default-Start:        2 3 4 5
# Default-Stop:         0 1 6
# Short-Description:    Runs i7z as a daemon in the background.
#
### END INIT INFO

set -e

I7Z_BINARY=/usr/local/bin/i7z

PID_FILE=/var/run/i7zdaemon.pid

LOG_DIR=/tmp/i7zdaemon

FREQUENCY_LOG="$LOG_DIR/frequency.log"
TEMPERATURE_LOG="$LOG_DIR/temperature.log"
CSTATE_LOG="$LOG_DIR/cstate.log"

function start() {
    if [ "$EUID" != "0" ]; then
        echo "i7zdaemon must be started as root."
        exit 1
    fi

    echo -n "Starting i7zdaemon: "

    if [ ! -a "$PID_FILE" ]; then
        # Start the service
        if [ ! -d "$LOG_DIR" ]; then
            mkdir "$LOG_DIR"
        fi

        $I7Z_BINARY --nogui -t -c -w l -l "$FREQUENCY_LOG" \
            -x "$TEMPERATURE_LOG" -p "$CSTATE_LOG" >/dev/null &
        
        # Create the lock file
        echo $! > "$PID_FILE"

        echo "i7zdaemon started."
    else
        echo "i7zdaemon already running [$(cat $PID_FILE)]."
        exit 1
    fi
}

function stop() {
    if [ "$EUID" != "0" ]; then
        echo "i7zdaemon must be stopped by root."
        exit 1
    fi

    echo -n "Stopping i7zdaemon: "

    if [ -a "$PID_FILE" ]; then
        # Stop the service
        kill "$(cat $PID_FILE)"
        # Delete the lock file
        rm -f "$PID_FILE"
        
        echo "i7zdaemon stopped."
    else
        echo "i7zdaemon not running."
    fi
}

function status() {
    echo -n "i7zdaemon status: "

    if [ -a "$PID_FILE" ]; then
        echo "i7zdaemon started."
    else
        echo "i7zdaemon stopped."
    fi
}

case "$1" in 
    start)
        start
        ;;
    stop)
        stop
        ;;
    status)
        status
        ;;
    restart)
        stop
        start
        ;;
    *)
        echo "Usage: i7zdaemon {start|stop|status|restart}"
        exit 1
        ;;
esac
